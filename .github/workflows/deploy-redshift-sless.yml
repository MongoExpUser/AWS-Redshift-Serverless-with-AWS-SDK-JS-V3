#  ***********************************************************************************************************************************************
#  *                                                                                                                                             *
#  * @License Starts                                                                                                                             *
#  *                                                                                                                                             *
#  * Copyright Â© 2015 - present. MongoExpUser.  All Rights Reserved.                                                                             *
#  *                                                                                                                                             *
#  * License: MIT - https://github.com/MongoExpUser/AWS-Redshift-Serverless-with-AWS-SDK-JS-V3/blob/main/LICENSE                                 *
#  *                                                                                                                                             *
#  * @License Ends                                                                                                                               *
#  *                                                                                                                                             *
#  *                                                                                                                                             *
#  ***********************************************************************************************************************************************
#  *                                                                                                                                             *
#  *  The YAML file implements a Workflow for the deployment of AWS Redshift Serverless with AWS SDK for JavaScript/NodeJS v3                    *
#  *                                                                                                                                             *
#  ***********************************************************************************************************************************************


# CI - Deploy AWS Redshift Serverless (RSSL)
name: CI - AWS-SDK-JS-V3 Deploy RSSL

# Option 1: Auto Workflow
#on:
  #push:
  #  branches:
  #  - main
  # pull_request:
  # matches pull request for all branches and tag names
  
# Option 2: Custom Workflow
on:
  workflow_dispatch:
    inputs:
      Run Workflow:
        description: 'Validated'
        default: 'Yes'
        required: true
        options:
        - 'Yes'
        - 'No'
      Tags:
        description: 'AWS-SDK-V3'
        default: true
        required: true
        type: boolean
      Environment:
        description: 'Environment'
        type: environment
        required: true
        default: Development
        
      
jobs:

  start:
    name: Deploy-RSSL-Start
    runs-on: ubuntu-latest
    environment: Starting
    env:
      DEPLOY: 'yes'
    defaults:
      run:
        shell: bash
 
    steps:
    - uses: actions/checkout@v2
      # note: checkout directory: /home/runner/work/${repo-name}/$${repo-name}
      
    - name: DEPLOY - Start
      if:  (env.DEPLOY == 'yes')
      run: |
        pwd
        echo Start of Deployment
        
        
  dev:
    # if: ${{ always() }}
    needs: [start]
    name: Deploy-RSSL-Dev
    runs-on: ubuntu-latest
    environment: Development
    env:
      # gen env variables
      DEPLOY: 'yes'
      SDK_INIT_DIRECTORY: 'init'
      BASE_DIRECTORY: '/home/runner/work'
      REPO_NAME: ${{ github.event.repository.name }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      ENVIRONMENT: ${{ inputs.environment }}
      # aws credentials env variables
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      # aws network env variables
      AWS_VPC_SECURITY_GROUP: ${{ secrets.AWS_VPC_SECURITY_GROUP }}
      AWS_VPC_SUBNET_ID_ONE: ${{ secrets.AWS_VPC_SUBNET_ID_ONE }}
      AWS_VPC_SUBNET_ID_TWO: ${{ secrets.AWS_VPC_SUBNET_ID_TWO }}
      AWS_VPC_SUBNET_ID_THREE: ${{ secrets.AWS_VPC_SUBNET_ID_THREE }}
      # aws redshift env variables
      ADMIN_USERNAME: ${{ secrets.ADMIN_USERNAME }}
      ADMIN_USER_PASSWORD: ${{ secrets.ADMIN_USER_PASSWORD }}
      IAM_ROLES: ${{ secrets.IAM_ROLES }}
      DEFAULT_IAM_Role_ARN: ${{ secrets.DEFAULT_IAM_Role_ARN }}
    defaults:
      run:
        shell: bash
 
    steps:
    - uses: actions/checkout@v2
      # note: checkout directory: /home/runner/work/${repo-name}/$${repo-name}
      
    - name: Install Node.js & Dependent Modules
      run: |
        # install
        sudo apt-get -y update
        curl -fsSL https://deb.nodesource.com/setup_19.x | sudo -E bash -
        sudo apt-get install -y nodejs
        sudo npm install  --prefix $BASE_DIRECTORY/$REPO_NAME/$REPO_NAME sudo npm install @aws-sdk/client-redshift-serverless dotenv

        # check versions & show directory's contents and details
        pwd
        sudo node -v
        sudo npm -v
        sudo npm ls
        sudo df -h
        sudo free -h
        sudo ls -ltr
           
    - name: Deploy - Dev
      if:  (env.DEPLOY == 'yes') && (env.ENVIRONMENT == 'Development')
      run: |
        # persist environmental variables & run code
        echo 'AWS_ACCESS_KEY_ID=${{ env.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY=${{ env.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION=${{ env.AWS_REGION }}
        AWS_VPC_SECURITY_GROUP=${{ env.AWS_VPC_SECURITY_GROUP }}
        AWS_VPC_SUBNET_ID_ONE=${{ env.AWS_VPC_SUBNET_ID_ONE }}
        AWS_VPC_SUBNET_ID_TWO=${{ env.AWS_VPC_SUBNET_ID_TWO }}
        AWS_VPC_SUBNET_ID_THREE=${{ env.AWS_VPC_SUBNET_ID_THREE }}
        ADMIN_USERNAME=${{ env.ADMIN_USERNAME }}
        ADMIN_USER_PASSWORD=${{ env.ADMIN_USER_PASSWORD }}
        IAM_ROLES=${{ env.IAM_ROLES }}
        DEFAULT_IAM_Role_ARN=${{env.DEFAULT_IAM_Role_ARN }}
        ' > .env
        sudo node gh-actions-index.js
  
  
  stag:
    #if: ${{ always() }}
    if: ${{ false }}  # disable job
    needs: [start]
    name: Deploy-RSSL-Stg
    runs-on: ubuntu-latest
    environment: Staging
    env:
      # gen env variables
      DEPLOY: 'yes'
      SDK_INIT_DIRECTORY: 'init'
      BASE_DIRECTORY: '/home/runner/work'
      REPO_NAME: ${{ github.event.repository.name }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      ENVIRONMENT: ${{ inputs.environment }}
      # aws credentials env variables
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      # aws network env variables
      AWS_VPC_SECURITY_GROUP: ${{ secrets.AWS_VPC_SECURITY_GROUP }}
      AWS_VPC_SUBNET_ID_ONE: ${{ secrets.AWS_VPC_SUBNET_ID_ONE }}
      AWS_VPC_SUBNET_ID_TWO: ${{ secrets.AWS_VPC_SUBNET_ID_TWO }}
      AWS_VPC_SUBNET_ID_THREE: ${{ secrets.AWS_VPC_SUBNET_ID_THREE }}
      # aws redshift env variables
      ADMIN_USERNAME: ${{ secrets.ADMIN_USERNAME }}
      ADMIN_USER_PASSWORD: ${{ secrets.ADMIN_USER_PASSWORD }}
      IAM_ROLES: ${{ secrets.IAM_ROLES }}
      DEFAULT_IAM_Role_ARN: ${{ secrets.DEFAULT_IAM_Role_ARN }}
    defaults:
      run:
        shell: bash
 
    steps:
    - uses: actions/checkout@v2
      # note: checkout directory: /home/runner/work/${repo-name}/$${repo-name}
      
    - name: Install Node.js & Dependent Modules
      run: |
        # install
        sudo apt-get -y update
        curl -fsSL https://deb.nodesource.com/setup_19.x | sudo -E bash -
        sudo apt-get install -y nodejs
        sudo npm install  --prefix $BASE_DIRECTORY/$REPO_NAME/$REPO_NAME sudo npm install @aws-sdk/client-redshift-serverless dotenv
        
        # check versions & show directory's contents and details
        pwd
        sudo node -v
        sudo npm -v
        sudo npm ls
        sudo df -h
        sudo free -h
        sudo ls -ltr
        
    - name: Deploy - Stag
      if:  (env.DEPLOY == 'yes') && (env.ENVIRONMENT == 'Staging')
      run: |
        # persist environmental variables & run code
        echo 'AWS_ACCESS_KEY_ID=${{ env.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY=${{ env.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION=${{ env.AWS_REGION }}
        AWS_VPC_SECURITY_GROUP=${{ env.AWS_VPC_SECURITY_GROUP }}
        AWS_VPC_SUBNET_ID_ONE=${{ env.AWS_VPC_SUBNET_ID_ONE }}
        AWS_VPC_SUBNET_ID_TWO=${{ env.AWS_VPC_SUBNET_ID_TWO }}
        AWS_VPC_SUBNET_ID_THREE=${{ env.AWS_VPC_SUBNET_ID_THREE }}
        ADMIN_USERNAME=${{ env.ADMIN_USERNAME }}
        ADMIN_USER_PASSWORD=${{ env.ADMIN_USER_PASSWORD }}
        IAM_ROLES=${{ env.IAM_ROLES }}
        DEFAULT_IAM_Role_ARN=${{env.DEFAULT_IAM_Role_ARN }}
        ' > .env
        sudo node gh-actions-index.js

      
  prod:
    #if: ${{ always() }}
    if: ${{ false }}  # disable job
    needs: [start]
    name: Deploy-RSSL-Prod
    runs-on: ubuntu-latest
    environment: Production
    env:
      # gen env variables
      DEPLOY: 'yes'
      SDK_INIT_DIRECTORY: 'init'
      BASE_DIRECTORY: '/home/runner/work'
      REPO_NAME: ${{ github.event.repository.name }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      ENVIRONMENT: ${{ inputs.environment }}
      # aws credentials env variables
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      # aws network env variables
      AWS_VPC_SECURITY_GROUP: ${{ secrets.AWS_VPC_SECURITY_GROUP }}
      AWS_VPC_SUBNET_ID_ONE: ${{ secrets.AWS_VPC_SUBNET_ID_ONE }}
      AWS_VPC_SUBNET_ID_TWO: ${{ secrets.AWS_VPC_SUBNET_ID_TWO }}
      AWS_VPC_SUBNET_ID_THREE: ${{ secrets.AWS_VPC_SUBNET_ID_THREE }}
      # aws redshift env variables
      ADMIN_USERNAME: ${{ secrets.ADMIN_USERNAME }}
      ADMIN_USER_PASSWORD: ${{ secrets.ADMIN_USER_PASSWORD }}
      IAM_ROLES: ${{ secrets.IAM_ROLES }}
      DEFAULT_IAM_Role_ARN: ${{ secrets.DEFAULT_IAM_Role_ARN }}
    defaults:
      run:
        shell: bash
 
    steps:
    - uses: actions/checkout@v2
      # note: checkout directory: /home/runner/work/${repo-name}/$${repo-name}
      
    - name: Install Node.js & Dependent Modules
      run: |
        # install
        sudo apt-get -y update
        curl -fsSL https://deb.nodesource.com/setup_19.x | sudo -E bash -
        sudo apt-get install -y nodejs
        sudo npm install  --prefix $BASE_DIRECTORY/$REPO_NAME/$REPO_NAME sudo npm install @aws-sdk/client-redshift-serverless dotenv
        
        # check versions & show directory's contents and details
        pwd
        sudo node -v
        sudo npm -v
        sudo npm ls
        sudo df -h
        sudo free -h
        sudo ls -ltr
        
    - name: Deploy - Prod
      if:  (env.DEPLOY == 'yes') && (env.ENVIRONMENT == 'Production')
      run: |
        # persist environmental variables & run code
        echo 'AWS_ACCESS_KEY_ID=${{ env.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY=${{ env.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION=${{ env.AWS_REGION }}
        AWS_VPC_SECURITY_GROUP=${{ env.AWS_VPC_SECURITY_GROUP }}
        AWS_VPC_SUBNET_ID_ONE=${{ env.AWS_VPC_SUBNET_ID_ONE }}
        AWS_VPC_SUBNET_ID_TWO=${{ env.AWS_VPC_SUBNET_ID_TWO }}
        AWS_VPC_SUBNET_ID_THREE=${{ env.AWS_VPC_SUBNET_ID_THREE }}
        ADMIN_USERNAME=${{ env.ADMIN_USERNAME }}
        ADMIN_USER_PASSWORD=${{ env.ADMIN_USER_PASSWORD }}
        IAM_ROLES=${{ env.IAM_ROLES }}
        DEFAULT_IAM_Role_ARN=${{env.DEFAULT_IAM_Role_ARN }}
        ' > .env
        sudo node gh-actions-index.js
        
  end:
    #if: ${{ always() }}
    #if: ${{ false }}  # disable job
    needs: [dev, stag, prod]
    name: Deploy-RSSL-End
    runs-on: ubuntu-latest
    environment: Ending
    env:
      DEPLOY: 'yes'
    defaults:
      run:
        shell: bash
 
    steps:
    - uses: actions/checkout@v2
      # note: checkout directory: /home/runner/work/${repo-name}/$${repo-name}

      
    - name: Deploy - End
      if:  (env.DEPLOY == 'yes')
      run: |
        pwd
        echo End of Deployment
